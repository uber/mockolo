
//
//  Copyright (c) 2018. Uber Technologies
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

import Foundation
import SourceKittenFramework
import CommonCrypto

/// Util extensions

extension String {
    static let `static` = "static"
    static let `import` = "import "
    static public let `class` = "class"
    static let override = "override"
    static let mockType = "protocol"
    static let unknownVal = "Unknown"
    static let any = "Any"
    static let anyObject = "AnyObject"
    static let fatalError = "fatalError"
    static let handlerSuffix = "Handler"
    static let observableVarPrefix = "Observable<"
    static let rxObservableVarPrefix = "RxSwift.Observable<"
    static let rxPublishSubject = "RxSwift.PublishSubject"
    static let publishSubject = "PublishSubject"
    static let behaviorSubject = "BehaviorSubject"
    static let replaySubject = "ReplaySubject"
    static let rx = "Rx"
    static let observableEmpty = "Observable.empty()"
    static let rxObservableEmpty = "RxSwift.Observable.empty()"
    static let subjectSuffix = "Subject"
    static let underlyingVarPrefix = "underlying"
    static let setCallCountSuffix = "SetCallCount"
    static let callCountSuffix = "CallCount"
    static let closureVarSuffix = "Handler"
    static let initializerPrefix = "init("
    static let `escaping` = "@escaping"
    static public let mockAnnotation = "@mockable"
    static public let poundIf = "#if "
    static public let poundEndIf = "#endif"
    static public let headerDoc =
    """
    ///
    /// @Generated by Mockolo
    ///
    """
    
    var isNotEmpty: Bool {
        return !isEmpty
    }
    
    var capitlizeFirstLetter: String {
        return prefix(1).capitalized + dropFirst()
    }
    
    func shouldParse(with exclusionList: [String]? = nil) -> Bool {
        guard hasSuffix(".swift") else { return false }
        
        if let name = components(separatedBy: ".swift").first, let exlist = exclusionList {
            for ex in exlist {
                if name.hasSuffix(ex) {
                    return false
                }
            }
            return true
        }
        
        return false
    }
    
    var displayableComponents: [String] {
        let ret = self.replacingOccurrences(of: "?", with: "Optional")
        return ret.components(separatedBy: CharacterSet(charactersIn: "<>[] :,()_-.&@#!{}@+\"\'"))
    }
    
    var displayableForType: String {
        return displayableComponents.map{$0 == .unknownVal ? "" : $0.capitlizeFirstLetter}.joined()
    }
    
    
    func extract(offset: Int64, length: Int64) -> String {
        let end = offset + length
        let start = offset
        let utf = self.utf8
        if start >= 0 && length > 0 {
            if end > utf.count {
                print("No content found", start, length, end, utf.count)
                return ""
            }
            let startIdx = utf.index(utf.startIndex, offsetBy: Int(start))
            let endIdx = utf.index(utf.startIndex, offsetBy: Int(end))
            let body = self[startIdx ..< endIdx]
            return String(body)
        }
        return ""
    }
}

enum Annotated {
    case annotated(String?)
    case none
}

extension Structure {
    
    init(path: String) throws {
        self.init(sourceKitResponse: try Request.customRequest(request: [
            "key.request": UID("source.request.editor.open"),
            "key.name": path,
            "key.sourcefile": path
            ]).send())
    }
    
    func isAnnotated(with annotation: String, in content: String) -> Annotated {
        if let part = extractDocComment(content) {
            if part.contains(annotation + "(namespace: ") {
                let moduleinfo = part.components(separatedBy: "():").filter {!$0.isEmpty}.last
                return .annotated(moduleinfo)
            } else if part.contains(annotation) {
                return .annotated(nil)
            }
        }
        return .none
    }
    
    func extractDocComment(_ content: String) -> String? {
        if let len = dictionary["key.doclength"] as? Int64,
            let offset = dictionary["key.docoffset"] as? Int64 {
            return content.extract(offset: offset, length: len)
        }
        return nil
    }
    
    func extractAttributes(_ content: String, filterOn: String? = nil) -> [String] {
        guard let attributeDict = attributes else {
            return []
        }
        
        return attributeDict.compactMap { (attribute: [String: SourceKitRepresentable]) -> String? in
            if let attributeVal = attribute["key.attribute"] as? String {
                if let filterAttribute = filterOn, attributeVal != filterAttribute {
                    return nil
                }
                
                return extract(attribute, from: content)
            }
            return nil
        }
    }
    
    
    func extract(_ source: [String: SourceKitRepresentable], from content: String) -> String {
        if let offset = source[SwiftDocKey.offset.rawValue] as? Int64,
            let len = source[SwiftDocKey.length.rawValue] as? Int64 {
            return content.extract(offset: offset, length: len)
        }
        return ""
    }
    
    
    /// The substructures of this structure.
    var substructures: [Structure] {
        let substructures = (dictionary["key.substructure"] as? [SourceKitRepresentable]) ?? []
        
        let result = substructures.compactMap { (substructure: SourceKitRepresentable) -> Structure? in
            if let structure = substructure as? [String: SourceKitRepresentable] {
                return Structure(sourceKitResponse: structure)
            } else {
                return nil
            }
        }
        return result
    }
    
    var name: String {
        // A type must have a name.
        return dictionary["key.name"] as? String ?? .unknownVal
    }
    
    var kind: String {
        return dictionary["key.kind"] as? String ?? .unknownVal
    }
    var typeName: String {
        return dictionary["key.typename"] as? String ?? .unknownVal
    }
    
    var hasAvailableAttribute: Bool {
        return kind == SwiftDeclarationAttributeKind.available.rawValue
    }
    
    var accessControlLevelDescription: String {
        return accessControlLevel == "internal" ? "" : accessControlLevel
    }
    
    var accessControlLevel: String {
        if let access = dictionary["key.accessibility"] as? String, let level = access.components(separatedBy: ".").last {
            return level
        }
        return .unknownVal
    }
    var isInitializer: Bool {
        return name.hasPrefix(.initializerPrefix) && isInstanceMethod
    }
    
    var isInstanceVariable: Bool {
        return kind == SwiftDeclarationKind.varInstance.rawValue
    }
    
    var isStaticVariable: Bool {
        return kind == SwiftDeclarationKind.varStatic.rawValue
    }
    
    var isStaticMethod: Bool {
        return kind == SwiftDeclarationKind.functionMethodStatic.rawValue
    }
    
    var isProtocol: Bool {
        return kind == SwiftDeclarationKind.protocol.rawValue
    }
    
    var isClass: Bool {
        return kind == SwiftDeclarationKind.class.rawValue
    }
    
    var isVariable: Bool {
        return isStaticVariable || isInstanceVariable
    }
    
    var isInstanceMethod: Bool {
        return kind == SwiftDeclarationKind.functionMethodInstance.rawValue
    }
    
    var isVarParameter: Bool {
        return kind == "source.lang.swift.decl.var.parameter"
    }
    
    var isTypeNonOptional: Bool {
        return !typeName.hasSuffix("?")
    }
    
    var isMethod: Bool {
        return isInstanceMethod || isStaticMethod
    }
    
    var isClosureVariable: Bool {
        return isVariable && typeName.contains("->")
    }
    
    var isGenericTypeParam: Bool {
        return kind == SwiftDeclarationKind.genericTypeParam.rawValue
    }
    var isGenericMethod: Bool {
        return isMethod && substructures.filter({$0.kind == SwiftDeclarationKind.genericTypeParam.rawValue}).count > 0
    }
    
    var canBeInitParam: Bool {
        return isVariable &&
            isTypeNonOptional &&
            !name.hasPrefix(.underlyingVarPrefix) &&
            !name.hasSuffix(.closureVarSuffix) &&
            !name.hasSuffix(.callCountSuffix) &&
            !name.hasSuffix(.subjectSuffix) &&
            typeName != .unknownVal
    }
    
    var inheritedTypes: [String] {
        let types = dictionary["key.inheritedtypes"] as? [SourceKitRepresentable] ?? []
        return types.compactMap { (item: SourceKitRepresentable) -> String? in
            (item as? [String: String])?["key.name"]
        }
    }
    
    var attributes: [[String: SourceKitRepresentable]]? {
        return dictionary["key.attributes"] as? [[String: SourceKitRepresentable]]
    }
    
    var attributeValues: [String]? {
        return attributes?.compactMap { $0["key.attribute"] as? String}
    }
    
    var range: (offset: Int64, length: Int64) {
        var offsetMin: Int64 = .max
        var offsetMax: Int64 = -1
        // Get the min/max offsets for attributes if any (e.g. @objc, public, static, etc) for this node
        if let attributes = attributes {
            let result = attributes.reduce((.max, -1), { (prevResult, curAttribute) -> (Int64, Int64) in
                var (minOffset, maxOffset) = prevResult
                if let offset = curAttribute[SwiftDocKey.offset.rawValue] as? Int64 {
                    if minOffset > offset {
                        minOffset = offset
                    }
                    if let len = curAttribute[SwiftDocKey.length.rawValue] as? Int64, maxOffset < offset + len {
                        maxOffset = offset + len
                    }
                }
                return (minOffset, maxOffset)
            })
            offsetMin = result.0
            offsetMax = result.1
        }
        
        // Compare with the offset and length of this node
        if offsetMin > offset {
            offsetMin = offset
        }
        if offsetMax < offset + length {
            offsetMax = offset + length
        }
        let len = offsetMax - offsetMin
        // Return the start offset and the length
        return (offsetMin, len)
    }
    
    
    var offset: Int64 {
        return dictionary[SwiftDocKey.offset.rawValue] as? Int64 ?? -1
    }
    
    var length: Int64 {
        return dictionary[SwiftDocKey.length.rawValue] as? Int64 ?? 0
    }
    var bodyOffset: Int64 {
        return dictionary[SwiftDocKey.bodyOffset.rawValue] as? Int64 ?? -1
    }
    
    // This extracts the body of this structure, i.e. it doens't include the decl or signature
    func extractBody(_ file: String) -> String {
        let start = dictionary["key.bodyoffset"] as? Int64 ?? -1
        let len = dictionary["key.bodylength"] as? Int64 ?? 0
        return file.extract(offset: start, length: len)
    }
}

public extension Sequence {
    
    func compactMap<T>(path: KeyPath<Element, T?>) -> [T] {
        return compactMap { (element) -> T? in
            element[keyPath: path]
        }
    }
    func map<T>(path: KeyPath<Element, T>) -> [T] {
        return map { (element) -> T in
            element[keyPath: path]
        }
    }
    
    func filter(path: KeyPath<Element, Bool>) -> [Element] {
        return filter { (element) -> Bool in
            element[keyPath: path]
        }
    }
    
    func sorted<T>(path: KeyPath<Element, T>) -> [Element] where T: Comparable {
        return sorted { (lhs, rhs) -> Bool in
            lhs[keyPath: path] < rhs[keyPath: path]
        }
    }
}


